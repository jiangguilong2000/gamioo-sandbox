/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'io.gamioo'


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21) // 保持项目编译目标为 JDK 21
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-XDignore.symbol.file')
}

// 定义资源集合
sourceSets {
    // main包
    main
    // test包
    test
    // jmh包
    jmh
}


tasks.register('createDirs') {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }

}


tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.author = true
    options.version = true
    options.header = project.name
    options.links = ["https://docs.oracle.com/javase/21/docs/api/"]
    options.addBooleanOption('html5', true)
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    from tasks.named('javadoc').get().outputs.files
    archiveClassifier = 'javadoc'
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}


dependencies {
    // log
    api 'org.apache.logging.log4j:log4j-api:2.25.1'
    api 'org.apache.logging.log4j:log4j-core:2.25.1'
    api 'org.apache.logging.log4j:log4j-web:2.25.1'
    api 'org.slf4j:slf4j-api:2.0.17'
    api 'com.lmax:disruptor:3.4.4'
    // 桥接：告诉slf4j使用Log4j2
    api 'org.apache.logging.log4j:log4j-slf4j2-impl:2.25.1'
    // 桥接：告诉commons logging使用Log4j2
    api 'org.apache.logging.log4j:log4j-jcl:2.25.1'
    // utils io
    api 'commons-io:commons-io:2.20.0'
    // utils xml
    api 'org.dom4j:dom4j:2.1.3'
    // utils lang
    api 'org.apache.commons:commons-lang3:3.18.0'
    // utils collection
    api 'org.openjdk.jol:jol-core:0.17'
    api 'org.apache.commons:commons-collections4:4.5.0'
    api group: 'com.carrotsearch', name: 'java-sizeof', version: '0.0.5'

    api 'org.apache.fory:fory-core:0.11.2'
    api group: 'io.protostuff', name: 'protostuff-core', version: '1.8.0'
    api group: 'io.protostuff', name: 'protostuff-runtime', version: '1.8.0'
    api 'com.google.protobuf:protobuf-java:4.32.0'
    api 'com.google.protobuf:protobuf-java-util:4.32.0'
    api group: 'com.alibaba.fastjson2', name: 'fastjson2', version: '2.0.58'
    api 'com.github.houbb:data-factory-core:1.2.0'
//    // This dependency is used by the application.
    api 'com.google.guava:guava:33.4.8-jre'
    api 'com.google.guava:failureaccess:1.0.3'
    api 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
    // jetbrain
    implementation group: 'org.jetbrains', name: 'annotations', version: '26.0.2'
    //Junit5
    testImplementation 'org.junit.platform:junit-platform-launcher:1.13.0-M3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.0-M3'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.13.0-M3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.0-M3'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.17.0'
    testImplementation 'org.mockito:mockito-core:5.17.0'

    // 保证jmh目录下java代码能顺利import其他main目录下等代码
    jmhImplementation project
    jmhImplementation 'org.openjdk.jmh:jmh-core:1.37'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    compileOnly group: 'org.apache.skywalking', name: 'apm-agent-core', version: '8.11.0'

}

test {
    useJUnitPlatform()
    jvmArgs '-Dfile.encoding=UTF-8'
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    ignoreFailures = false
    failFast = true
    testLogging {
        showStandardStreams = true
        events = ["passed", "failed", "skipped"]
        exceptionFormat = "full"
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println """
               Tests Summary:
               Total: ${result.testCount}
               Passed: ${result.successfulTestCount}
               Failed: ${result.failedTestCount}
               Skipped: ${result.skippedTestCount}
               -------------------------
               """.stripIndent()
        }
    }


    reports.html.required = true
    reports.junitXml.required = false
}

// 汇总 Gradle 多模块测试结果
tasks.register('testReport', TestReport) {
    // 设置输出目录
    destinationDirectory.set(layout.buildDirectory.dir("reports/allTests"))
    // 添加要聚合的测试结果（并设置 ignoreFailures）
    testResults.from(
            subprojects.collect {
                def testTask = it.tasks.test
                testTask.ignoreFailures = true
                testTask.binaryResultsDirectory
            }
    )
}

repositories {
    //腾讯云的国内镜像
    maven { url 'https://mirrors.cloud.tencent.com/nexus/repository/maven-public' }
}
