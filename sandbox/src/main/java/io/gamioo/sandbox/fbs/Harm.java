// automatically generated by the FlatBuffers compiler, do not modify

package io.gamioo.sandbox.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Harm extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Harm getRootAsHarm(ByteBuffer _bb) { return getRootAsHarm(_bb, new Harm()); }
  public static Harm getRootAsHarm(ByteBuffer _bb, Harm obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Harm __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long targetId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public double curHp() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double maxHp() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public int real() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public byte type() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public double value() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public boolean dead() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createHarm(FlatBufferBuilder builder,
      long targetId,
      double curHp,
      double maxHp,
      int real,
      byte type,
      double value,
      boolean dead) {
    builder.startTable(7);
    Harm.addValue(builder, value);
    Harm.addMaxHp(builder, maxHp);
    Harm.addCurHp(builder, curHp);
    Harm.addTargetId(builder, targetId);
    Harm.addReal(builder, real);
    Harm.addDead(builder, dead);
    Harm.addType(builder, type);
    return Harm.endHarm(builder);
  }

  public static void startHarm(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addTargetId(FlatBufferBuilder builder, long targetId) { builder.addLong(0, targetId, 0L); }
  public static void addCurHp(FlatBufferBuilder builder, double curHp) { builder.addDouble(1, curHp, 0.0); }
  public static void addMaxHp(FlatBufferBuilder builder, double maxHp) { builder.addDouble(2, maxHp, 0.0); }
  public static void addReal(FlatBufferBuilder builder, int real) { builder.addInt(3, real, 0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(4, type, 0); }
  public static void addValue(FlatBufferBuilder builder, double value) { builder.addDouble(5, value, 0.0); }
  public static void addDead(FlatBufferBuilder builder, boolean dead) { builder.addBoolean(6, dead, false); }
  public static int endHarm(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Harm get(int j) { return get(new Harm(), j); }
    public Harm get(Harm obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

